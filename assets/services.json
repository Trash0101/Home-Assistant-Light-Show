[
  {
    "domain": "persistent_notification",
    "services": {
      "create": {
        "name": "Create",
        "description": "Shows a notification on the **Notifications** panel.",
        "fields": {
          "message": {
            "required": true,
            "example": "Please check your configuration.yaml.",
            "selector": {
              "text": null
            },
            "name": "Message",
            "description": "Message body of the notification."
          },
          "title": {
            "example": "Test notification",
            "selector": {
              "text": null
            },
            "name": "Title",
            "description": "Optional title of the notification."
          },
          "notification_id": {
            "example": 1234,
            "selector": {
              "text": null
            },
            "name": "Notification ID",
            "description": "ID of the notification. This new notification will overwrite an existing notification with the same ID."
          }
        }
      },
      "dismiss": {
        "name": "Dismiss",
        "description": "Removes a notification from the **Notifications** panel.",
        "fields": {
          "notification_id": {
            "required": true,
            "example": 1234,
            "selector": {
              "text": null
            },
            "name": "Notification ID",
            "description": "ID of the notification to be removed."
          }
        }
      },
      "dismiss_all": {
        "name": "Dismiss all",
        "description": "Removes all notifications from the **Notifications** panel.",
        "fields": {}
      }
    }
  },
  {
    "domain": "homeassistant",
    "services": {
      "save_persistent_states": {
        "name": "Save persistent states",
        "description": "Saves the persistent states immediately. Maintains the normal periodic saving interval.",
        "fields": {}
      },
      "turn_off": {
        "name": "Generic turn off",
        "description": "Generic service to turn devices off under any domain.",
        "fields": {},
        "target": {
          "entity": [
            {}
          ]
        }
      },
      "turn_on": {
        "name": "Generic turn on",
        "description": "Generic service to turn devices on under any domain.",
        "fields": {},
        "target": {
          "entity": [
            {}
          ]
        }
      },
      "toggle": {
        "name": "Generic toggle",
        "description": "Generic service to toggle devices on/off under any domain.",
        "fields": {},
        "target": {
          "entity": [
            {}
          ]
        }
      },
      "stop": {
        "name": "Stop",
        "description": "Stops Home Assistant.",
        "fields": {}
      },
      "restart": {
        "name": "Restart",
        "description": "Restarts Home Assistant.",
        "fields": {}
      },
      "check_config": {
        "name": "Check configuration",
        "description": "Checks the Home Assistant YAML-configuration files for errors. Errors will be shown in the Home Assistant logs.",
        "fields": {}
      },
      "update_entity": {
        "name": "Update entity",
        "description": "Forces one or more entities to update its data.",
        "fields": {},
        "target": {
          "entity": [
            {}
          ]
        }
      },
      "reload_core_config": {
        "name": "Reload core configuration",
        "description": "Reloads the core configuration from the YAML-configuration.",
        "fields": {}
      },
      "set_location": {
        "name": "Set location",
        "description": "Updates the Home Assistant location.",
        "fields": {
          "latitude": {
            "required": true,
            "example": 32.87336,
            "selector": {
              "number": {
                "mode": "box",
                "min": -90,
                "max": 90,
                "step": "any"
              }
            },
            "name": "Latitude",
            "description": "Latitude of your location."
          },
          "longitude": {
            "required": true,
            "example": 117.22743,
            "selector": {
              "number": {
                "mode": "box",
                "min": -180,
                "max": 180,
                "step": "any"
              }
            },
            "name": "Longitude",
            "description": "Longitude of your location."
          },
          "elevation": {
            "required": false,
            "example": 120,
            "selector": {
              "number": {
                "mode": "box",
                "step": "any"
              }
            },
            "name": "Elevation",
            "description": "Elevation of your location."
          }
        }
      },
      "reload_custom_templates": {
        "name": "Reload custom Jinja2 templates",
        "description": "Reloads Jinja2 templates found in the `custom_templates` folder in your config. New values will be applied on the next render of the template.",
        "fields": {}
      },
      "reload_config_entry": {
        "name": "Reload config entry",
        "description": "Reloads the specified config entry.",
        "fields": {
          "entry_id": {
            "advanced": true,
            "required": false,
            "example": "8955375327824e14ba89e4b29cc3ec9a",
            "selector": {
              "text": null
            },
            "name": "Config entry ID",
            "description": "The configuration entry ID of the entry to be reloaded."
          }
        },
        "target": {
          "entity": [
            {}
          ],
          "device": [
            {}
          ]
        }
      },
      "reload_all": {
        "name": "Reload all",
        "description": "Reload all YAML configuration that can be reloaded without restarting Home Assistant.",
        "fields": {}
      }
    }
  },
  {
    "domain": "system_log",
    "services": {
      "clear": {
        "name": "Clear all",
        "description": "Clears all log entries.",
        "fields": {}
      },
      "write": {
        "name": "Write",
        "description": "Write log entry.",
        "fields": {
          "message": {
            "required": true,
            "example": "Something went wrong",
            "selector": {
              "text": null
            },
            "name": "Message",
            "description": "Message to log."
          },
          "level": {
            "default": "error",
            "selector": {
              "select": {
                "options": [
                  "debug",
                  "info",
                  "warning",
                  "error",
                  "critical"
                ],
                "translation_key": "level"
              }
            },
            "name": "Level",
            "description": "Log level."
          },
          "logger": {
            "example": "mycomponent.myplatform",
            "selector": {
              "text": null
            },
            "name": "Logger",
            "description": "Logger name under which to log the message. Defaults to `system_log.external`."
          }
        }
      }
    }
  },
  {
    "domain": "logger",
    "services": {
      "set_default_level": {
        "name": "Set default level",
        "description": "Sets the default log level for integrations.",
        "fields": {
          "level": {
            "selector": {
              "select": {
                "options": [
                  "debug",
                  "info",
                  "warning",
                  "error",
                  "fatal",
                  "critical"
                ],
                "translation_key": "level"
              }
            },
            "name": "Level",
            "description": "Default severity level for all integrations."
          }
        }
      },
      "set_level": {
        "name": "Set level",
        "description": "Sets the log level for one or more integrations.",
        "fields": {}
      }
    }
  },
  {
    "domain": "person",
    "services": {
      "reload": {
        "name": "Reload",
        "description": "Reloads persons from the YAML-configuration.",
        "fields": {}
      }
    }
  },
  {
    "domain": "frontend",
    "services": {
      "set_theme": {
        "name": "Set the default theme",
        "description": "Sets the default theme Home Assistant uses. Can be overridden by a user.",
        "fields": {
          "name": {
            "required": true,
            "example": "default",
            "selector": {
              "theme": {
                "include_default": true
              }
            },
            "name": "Theme",
            "description": "Name of a theme."
          },
          "mode": {
            "default": "light",
            "selector": {
              "select": {
                "options": [
                  "dark",
                  "light"
                ],
                "translation_key": "mode"
              }
            },
            "name": "Mode",
            "description": "Theme mode."
          }
        }
      },
      "reload_themes": {
        "name": "Reload themes",
        "description": "Reloads themes from the YAML-configuration.",
        "fields": {}
      }
    }
  },
  {
    "domain": "recorder",
    "services": {
      "purge": {
        "name": "Purge",
        "description": "Starts purge task - to clean up old data from your database.",
        "fields": {
          "keep_days": {
            "selector": {
              "number": {
                "min": 0,
                "max": 365,
                "unit_of_measurement": "days"
              }
            },
            "name": "Days to keep",
            "description": "Number of days to keep the data in the database. Starting today, counting backward. A value of `7` means that everything older than a week will be purged."
          },
          "repack": {
            "default": false,
            "selector": {
              "boolean": null
            },
            "name": "Repack",
            "description": "Attempt to save disk space by rewriting the entire database file."
          },
          "apply_filter": {
            "default": false,
            "selector": {
              "boolean": null
            },
            "name": "Apply filter",
            "description": "Applys `entity_id` and `event_type` filters in addition to time-based purge."
          }
        }
      },
      "purge_entities": {
        "name": "Purge entities",
        "description": "Starts a purge task to remove the data related to specific entities from your database.",
        "fields": {
          "domains": {
            "example": "sun",
            "required": false,
            "default": [],
            "selector": {
              "object": null
            },
            "name": "Domains to remove",
            "description": "List of domains for which the data needs to be removed from the recorder database."
          },
          "entity_globs": {
            "example": "domain*.object_id*",
            "required": false,
            "default": [],
            "selector": {
              "object": null
            },
            "name": "Entity globs to remove",
            "description": "List of glob patterns used to select the entities for which the data is to be removed from the recorder database."
          },
          "keep_days": {
            "default": 0,
            "selector": {
              "number": {
                "min": 0,
                "max": 365,
                "unit_of_measurement": "days"
              }
            },
            "name": "Days to keep",
            "description": "Number of days to keep the data for rows matching the filter. Starting today, counting backward. A value of `7` means that everything older than a week will be purged. The default of 0 days will remove all matching rows immediately."
          }
        },
        "target": {
          "entity": [
            {}
          ]
        }
      },
      "enable": {
        "name": "Enable",
        "description": "Starts the recording of events and state changes.",
        "fields": {}
      },
      "disable": {
        "name": "Disable",
        "description": "Stops the recording of events and state changes.",
        "fields": {}
      }
    }
  },
  {
    "domain": "cloud",
    "services": {
      "remote_connect": {
        "name": "Remote connect",
        "description": "Makes the instance UI accessible from outside of the local network by using Home Assistant Cloud.",
        "fields": {}
      },
      "remote_disconnect": {
        "name": "Remote disconnect",
        "description": "Disconnects the Home Assistant UI from the Home Assistant Cloud. You will no longer be able to access your Home Assistant instance from outside your local network.",
        "fields": {}
      }
    }
  },
  {
    "domain": "conversation",
    "services": {
      "process": {
        "name": "Process",
        "description": "Launches a conversation from a transcribed text.",
        "fields": {
          "text": {
            "example": "Turn all lights on",
            "required": true,
            "selector": {
              "text": null
            },
            "name": "Text",
            "description": "Transcribed text input."
          },
          "language": {
            "example": "NL",
            "selector": {
              "text": null
            },
            "name": "Language",
            "description": "Language of text. Defaults to server language."
          },
          "agent_id": {
            "example": "homeassistant",
            "selector": {
              "conversation_agent": null
            },
            "name": "Agent",
            "description": "Conversation agent to process your request. The conversation agent is the brains of your assistant. It processes the incoming text commands."
          }
        },
        "response": {
          "optional": true
        }
      },
      "reload": {
        "name": "Reload",
        "description": "Reloads the intent configuration.",
        "fields": {
          "language": {
            "example": "NL",
            "selector": {
              "text": null
            },
            "name": "Language",
            "description": "Language to clear cached intents for. Defaults to server language."
          },
          "agent_id": {
            "example": "homeassistant",
            "selector": {
              "conversation_agent": null
            },
            "name": "Agent",
            "description": "Conversation agent to reload."
          }
        }
      }
    }
  },
  {
    "domain": "logbook",
    "services": {
      "log": {
        "name": "Log",
        "description": "Creates a custom entry in the logbook.",
        "fields": {
          "name": {
            "required": true,
            "example": "Kitchen",
            "selector": {
              "text": null
            },
            "name": "Name",
            "description": "Custom name for an entity, can be referenced using an `entity_id`."
          },
          "message": {
            "required": true,
            "example": "is being used",
            "selector": {
              "text": null
            },
            "name": "Message",
            "description": "Message of the logbook entry."
          },
          "entity_id": {
            "selector": {
              "entity": null
            },
            "name": "Entity ID",
            "description": "Entity to reference in the logbook entry."
          },
          "domain": {
            "example": "light",
            "selector": {
              "text": null
            },
            "name": "Domain",
            "description": "Determines which icon is used in the logbook entry. The icon illustrates the integration domain related to this logbook entry."
          }
        }
      }
    }
  },
  {
    "domain": "input_text",
    "services": {
      "reload": {
        "name": "Reload",
        "description": "Reloads helpers from the YAML-configuration.",
        "fields": {}
      },
      "set_value": {
        "name": "Set",
        "description": "Sets the value.",
        "fields": {
          "value": {
            "required": true,
            "example": "This is an example text",
            "selector": {
              "text": null
            },
            "name": "Value",
            "description": "The target value."
          }
        },
        "target": {
          "entity": [
            {
              "domain": [
                "input_text"
              ]
            }
          ]
        }
      }
    }
  },
  {
    "domain": "input_number",
    "services": {
      "reload": {
        "name": "Reload",
        "description": "Reloads helpers from the YAML-configuration.",
        "fields": {}
      },
      "set_value": {
        "name": "Set",
        "description": "Sets the value.",
        "fields": {
          "value": {
            "required": true,
            "selector": {
              "number": {
                "min": 0,
                "max": 9223372036854775807,
                "step": 0.001,
                "mode": "box"
              }
            },
            "name": "Value",
            "description": "The target value."
          }
        },
        "target": {
          "entity": [
            {
              "domain": [
                "input_number"
              ]
            }
          ]
        }
      },
      "increment": {
        "name": "Increment",
        "description": "Increments the value by 1 step.",
        "fields": {},
        "target": {
          "entity": [
            {
              "domain": [
                "input_number"
              ]
            }
          ]
        }
      },
      "decrement": {
        "name": "Decrement",
        "description": "Decrements the current value by 1 step.",
        "fields": {},
        "target": {
          "entity": [
            {
              "domain": [
                "input_number"
              ]
            }
          ]
        }
      }
    }
  },
  {
    "domain": "input_select",
    "services": {
      "reload": {
        "name": "Reload",
        "description": "Reloads helpers from the YAML-configuration.",
        "fields": {}
      },
      "select_first": {
        "name": "First",
        "description": "Selects the first option.",
        "fields": {},
        "target": {
          "entity": [
            {
              "domain": [
                "input_select"
              ]
            }
          ]
        }
      },
      "select_last": {
        "name": "Last",
        "description": "Selects the last option.",
        "fields": {},
        "target": {
          "entity": [
            {
              "domain": [
                "input_select"
              ]
            }
          ]
        }
      },
      "select_next": {
        "name": "Next",
        "description": "Select the next option.",
        "fields": {
          "cycle": {
            "default": true,
            "selector": {
              "boolean": null
            },
            "name": "Cycle",
            "description": "If the option should cycle from the last to the first option on the list."
          }
        },
        "target": {
          "entity": [
            {
              "domain": [
                "input_select"
              ]
            }
          ]
        }
      },
      "select_option": {
        "name": "Select",
        "description": "Selects an option.",
        "fields": {
          "option": {
            "required": true,
            "example": "\"Item A\"",
            "selector": {
              "text": null
            },
            "name": "Option",
            "description": "Option to be selected."
          }
        },
        "target": {
          "entity": [
            {
              "domain": [
                "input_select"
              ]
            }
          ]
        }
      },
      "select_previous": {
        "name": "Previous",
        "description": "Selects the previous option.",
        "fields": {
          "cycle": {
            "default": true,
            "selector": {
              "boolean": null
            },
            "name": "Cycle",
            "description": "If the option should cycle from the last to the first option on the list."
          }
        },
        "target": {
          "entity": [
            {
              "domain": [
                "input_select"
              ]
            }
          ]
        }
      },
      "set_options": {
        "name": "Set options",
        "description": "Sets the options.",
        "fields": {
          "options": {
            "required": true,
            "example": "[\"Item A\", \"Item B\", \"Item C\"]",
            "selector": {
              "object": null
            },
            "name": "Options",
            "description": "List of options."
          }
        },
        "target": {
          "entity": [
            {
              "domain": [
                "input_select"
              ]
            }
          ]
        }
      }
    }
  },
  {
    "domain": "input_boolean",
    "services": {
      "reload": {
        "name": "Reload",
        "description": "Reloads helpers from the YAML-configuration.",
        "fields": {}
      },
      "turn_on": {
        "name": "Turn on",
        "description": "Turns on the helper.",
        "fields": {},
        "target": {
          "entity": [
            {
              "domain": [
                "input_boolean"
              ]
            }
          ]
        }
      },
      "turn_off": {
        "name": "Turn off",
        "description": "Turns off the helper.",
        "fields": {},
        "target": {
          "entity": [
            {
              "domain": [
                "input_boolean"
              ]
            }
          ]
        }
      },
      "toggle": {
        "name": "Toggle",
        "description": "Toggles the helper on/off.",
        "fields": {},
        "target": {
          "entity": [
            {
              "domain": [
                "input_boolean"
              ]
            }
          ]
        }
      }
    }
  },
  {
    "domain": "input_datetime",
    "services": {
      "reload": {
        "name": "Reload",
        "description": "Reloads helpers from the YAML-configuration.",
        "fields": {}
      },
      "set_datetime": {
        "name": "Set",
        "description": "Sets the date and/or time.",
        "fields": {
          "date": {
            "example": "\"2019-04-20\"",
            "selector": {
              "text": null
            },
            "name": "Date",
            "description": "The target date."
          },
          "time": {
            "example": "\"05:04:20\"",
            "selector": {
              "time": null
            },
            "name": "Time",
            "description": "The target time."
          },
          "datetime": {
            "example": "\"2019-04-20 05:04:20\"",
            "selector": {
              "text": null
            },
            "name": "Date & time",
            "description": "The target date & time."
          },
          "timestamp": {
            "selector": {
              "number": {
                "min": 0,
                "max": 9223372036854775807,
                "mode": "box"
              }
            },
            "name": "Timestamp",
            "description": "The target date & time, expressed by a UNIX timestamp."
          }
        },
        "target": {
          "entity": [
            {
              "domain": [
                "input_datetime"
              ]
            }
          ]
        }
      }
    }
  },
  {
    "domain": "schedule",
    "services": {
      "reload": {
        "name": "Reload",
        "description": "Reloads schedules from the YAML-configuration.",
        "fields": {}
      }
    }
  },
  {
    "domain": "timer",
    "services": {
      "reload": {
        "name": "Reload",
        "description": "Reloads timers from the YAML-configuration.",
        "fields": {}
      },
      "start": {
        "name": "Start",
        "description": "Starts a timer.",
        "fields": {
          "duration": {
            "example": "00:01:00 or 60",
            "selector": {
              "text": null
            },
            "name": "Duration",
            "description": "Duration the timer requires to finish. [optional]."
          }
        },
        "target": {
          "entity": [
            {
              "domain": [
                "timer"
              ]
            }
          ]
        }
      },
      "pause": {
        "name": "Pause",
        "description": "Pauses a timer.",
        "fields": {},
        "target": {
          "entity": [
            {
              "domain": [
                "timer"
              ]
            }
          ]
        }
      },
      "cancel": {
        "name": "Cancel",
        "description": "Cancels a timer.",
        "fields": {},
        "target": {
          "entity": [
            {
              "domain": [
                "timer"
              ]
            }
          ]
        }
      },
      "finish": {
        "name": "Finish",
        "description": "Finishes a timer.",
        "fields": {},
        "target": {
          "entity": [
            {
              "domain": [
                "timer"
              ]
            }
          ]
        }
      },
      "change": {
        "name": "Change",
        "description": "Changes a timer.",
        "fields": {
          "duration": {
            "default": 0,
            "required": true,
            "example": "00:01:00, 60 or -60",
            "selector": {
              "text": null
            },
            "name": "Duration",
            "description": "Duration to add or subtract to the running timer."
          }
        },
        "target": {
          "entity": [
            {
              "domain": [
                "timer"
              ]
            }
          ]
        }
      }
    }
  },
  {
    "domain": "input_button",
    "services": {
      "reload": {
        "name": "Reload",
        "description": "Reloads helpers from the YAML-configuration.",
        "fields": {}
      },
      "press": {
        "name": "Press",
        "description": "Mimics the physical button press on the device.",
        "fields": {},
        "target": {
          "entity": [
            {
              "domain": [
                "input_button"
              ]
            }
          ]
        }
      }
    }
  },
  {
    "domain": "script",
    "services": {
      "reload": {
        "name": "Reload",
        "description": "Reloads all the available scripts.",
        "fields": {}
      },
      "turn_on": {
        "name": "Turn on",
        "description": "Runs the sequence of actions defined in a script.",
        "fields": {},
        "target": {
          "entity": [
            {
              "domain": [
                "script"
              ]
            }
          ]
        }
      },
      "turn_off": {
        "name": "Turn off",
        "description": "Stops a running script.",
        "fields": {},
        "target": {
          "entity": [
            {
              "domain": [
                "script"
              ]
            }
          ]
        }
      },
      "toggle": {
        "name": "Toggle",
        "description": "Toggle a script. Starts it, if isn't running, stops it otherwise.",
        "fields": {},
        "target": {
          "entity": [
            {
              "domain": [
                "script"
              ]
            }
          ]
        }
      }
    }
  },
  {
    "domain": "automation",
    "services": {
      "trigger": {
        "name": "Trigger",
        "description": "Triggers the actions of an automation.",
        "fields": {
          "skip_condition": {
            "default": true,
            "selector": {
              "boolean": null
            },
            "name": "Skip conditions",
            "description": "Defines whether or not the conditions will be skipped."
          }
        },
        "target": {
          "entity": [
            {
              "domain": [
                "automation"
              ]
            }
          ]
        }
      },
      "toggle": {
        "name": "Toggle",
        "description": "Toggles (enable / disable) an automation.",
        "fields": {},
        "target": {
          "entity": [
            {
              "domain": [
                "automation"
              ]
            }
          ]
        }
      },
      "turn_on": {
        "name": "Turn on",
        "description": "Enables an automation.",
        "fields": {},
        "target": {
          "entity": [
            {
              "domain": [
                "automation"
              ]
            }
          ]
        }
      },
      "turn_off": {
        "name": "Turn off",
        "description": "Disables an automation.",
        "fields": {
          "stop_actions": {
            "default": true,
            "selector": {
              "boolean": null
            },
            "name": "Stop actions",
            "description": "Stops currently running actions."
          }
        },
        "target": {
          "entity": [
            {
              "domain": [
                "automation"
              ]
            }
          ]
        }
      },
      "reload": {
        "name": "Reload",
        "description": "Reloads the automation configuration.",
        "fields": {}
      }
    }
  },
  {
    "domain": "tts",
    "services": {
      "speak": {
        "name": "Speak",
        "description": "Speaks something using text-to-speech on a media player.",
        "fields": {
          "media_player_entity_id": {
            "required": true,
            "selector": {
              "entity": {
                "domain": "media_player"
              }
            },
            "name": "Media player entity",
            "description": "Media players to play the message."
          },
          "message": {
            "example": "My name is hanna",
            "required": true,
            "selector": {
              "text": null
            },
            "name": "Message",
            "description": "The text you want to convert into speech so that you can listen to it on your device."
          },
          "cache": {
            "default": true,
            "selector": {
              "boolean": null
            },
            "name": "Cache",
            "description": "Stores this message locally so that when the text is requested again, the output can be produced more quickly."
          },
          "language": {
            "example": "ru",
            "selector": {
              "text": null
            },
            "name": "Language",
            "description": "Language to use for speech generation."
          },
          "options": {
            "advanced": true,
            "example": "platform specific",
            "selector": {
              "object": null
            },
            "name": "Options",
            "description": "A dictionary containing integration-specific options."
          }
        },
        "target": {
          "entity": [
            {
              "domain": [
                "tts"
              ]
            }
          ]
        }
      },
      "clear_cache": {
        "name": "Clear TTS cache",
        "description": "Removes all cached text-to-speech files and purges the memory.",
        "fields": {}
      }
    }
  },
  {
    "domain": "shopping_list",
    "services": {
      "add_item": {
        "name": "Add item",
        "description": "Adds an item to the shopping list.",
        "fields": {
          "name": {
            "required": true,
            "example": "Beer",
            "selector": {
              "text": null
            },
            "name": "Name",
            "description": "The name of the item to add."
          }
        }
      },
      "remove_item": {
        "name": "Remove item",
        "description": "Removes the first item with matching name from the shopping list.",
        "fields": {
          "name": {
            "required": true,
            "example": "Beer",
            "selector": {
              "text": null
            },
            "name": "Name",
            "description": "The name of the item to remove."
          }
        }
      },
      "complete_item": {
        "name": "Complete item",
        "description": "Marks the first item with matching name as completed in the shopping list.",
        "fields": {
          "name": {
            "required": true,
            "example": "Beer",
            "selector": {
              "text": null
            },
            "name": "Name",
            "description": "The name of the item to mark as completed (without removing)."
          }
        }
      },
      "incomplete_item": {
        "name": "Incomplete item",
        "description": "Marks the first item with matching name as incomplete in the shopping list.",
        "fields": {
          "name": {
            "example": "Beer",
            "required": true,
            "selector": {
              "text": null
            },
            "name": "Name",
            "description": "The name of the item to mark as incomplete."
          }
        }
      },
      "complete_all": {
        "name": "Complete all",
        "description": "Marks all items as completed in the shopping list (without removing them from the list).",
        "fields": {}
      },
      "incomplete_all": {
        "name": "Incomplete all",
        "description": "Marks all items as incomplete in the shopping list.",
        "fields": {}
      },
      "clear_completed_items": {
        "name": "Clear completed items",
        "description": "Clears completed items from the shopping list.",
        "fields": {}
      },
      "sort": {
        "name": "Sort all items",
        "description": "Sorts all items by name in the shopping list.",
        "fields": {
          "reverse": {
            "default": false,
            "selector": {
              "boolean": null
            },
            "name": "Sort reverse",
            "description": "Whether to sort in reverse (descending) order."
          }
        }
      }
    }
  },
  {
    "domain": "zone",
    "services": {
      "reload": {
        "name": "Reload",
        "description": "Reloads zones from the YAML-configuration.",
        "fields": {}
      }
    }
  },
  {
    "domain": "counter",
    "services": {
      "increment": {
        "name": "Increment",
        "description": "Increments a counter.",
        "fields": {},
        "target": {
          "entity": [
            {
              "domain": [
                "counter"
              ]
            }
          ]
        }
      },
      "decrement": {
        "name": "Decrement",
        "description": "Decrements a counter.",
        "fields": {},
        "target": {
          "entity": [
            {
              "domain": [
                "counter"
              ]
            }
          ]
        }
      },
      "reset": {
        "name": "Reset",
        "description": "Resets a counter.",
        "fields": {},
        "target": {
          "entity": [
            {
              "domain": [
                "counter"
              ]
            }
          ]
        }
      },
      "set_value": {
        "name": "Set",
        "description": "Sets the counter value.",
        "fields": {
          "value": {
            "required": true,
            "selector": {
              "number": {
                "min": 0,
                "max": 9223372036854775807,
                "mode": "box"
              }
            },
            "name": "Value",
            "description": "The new counter value the entity should be set to."
          }
        },
        "target": {
          "entity": [
            {
              "domain": [
                "counter"
              ]
            }
          ]
        }
      },
      "configure": {
        "name": "",
        "description": "",
        "fields": {}
      }
    }
  },
  {
    "domain": "scene",
    "services": {
      "reload": {
        "name": "Reload",
        "description": "Reloads the scenes from the YAML-configuration.",
        "fields": {}
      },
      "apply": {
        "name": "Apply",
        "description": "Activates a scene with configuration.",
        "fields": {
          "entities": {
            "required": true,
            "example": "light.kitchen: \"on\"\nlight.ceiling:\n  state: \"on\"\n  brightness: 80\n",
            "selector": {
              "object": null
            },
            "name": "Entities state",
            "description": "List of entities and their target state."
          },
          "transition": {
            "selector": {
              "number": {
                "min": 0,
                "max": 300,
                "unit_of_measurement": "seconds"
              }
            },
            "name": "Transition",
            "description": "Time it takes the devices to transition into the states defined in the scene."
          }
        }
      },
      "create": {
        "name": "Create",
        "description": "Creates a new scene.",
        "fields": {
          "scene_id": {
            "required": true,
            "example": "all_lights",
            "selector": {
              "text": null
            },
            "name": "Scene entity ID",
            "description": "The entity ID of the new scene."
          },
          "entities": {
            "example": "light.tv_back_light: \"on\"\nlight.ceiling:\n  state: \"on\"\n  brightness: 200\n",
            "selector": {
              "object": null
            },
            "name": "Entities state",
            "description": "List of entities and their target state. If your entities are already in the target state right now, use `snapshot_entities` instead."
          },
          "snapshot_entities": {
            "example": "- light.ceiling\n- light.kitchen\n",
            "selector": {
              "object": null
            },
            "name": "Snapshot entities",
            "description": "List of entities to be included in the snapshot. By taking a snapshot, you record the current state of those entities. If you do not want to use the current state of all your entities for this scene, you can combine the `snapshot_entities` with `entities`."
          }
        }
      },
      "turn_on": {
        "name": "Activate",
        "description": "Activates a scene.",
        "fields": {
          "transition": {
            "selector": {
              "number": {
                "min": 0,
                "max": 300,
                "unit_of_measurement": "seconds"
              }
            },
            "name": "Transition",
            "description": "Time it takes the devices to transition into the states defined in the scene."
          }
        },
        "target": {
          "entity": [
            {
              "domain": [
                "scene"
              ]
            }
          ]
        }
      }
    }
  },
  {
    "domain": "notify",
    "services": {
      "persistent_notification": {
        "name": "Send a persistent notification",
        "description": "Sends a notification that is visible in the **Notifications** panel.",
        "fields": {
          "message": {
            "required": true,
            "example": "The garage door has been open for 10 minutes.",
            "selector": {
              "text": null
            },
            "name": "Message",
            "description": "Message body of the notification."
          },
          "title": {
            "example": "Your Garage Door Friend",
            "selector": {
              "text": null
            },
            "name": "Title",
            "description": "Title of the notification."
          },
          "data": {
            "example": "platform specific",
            "selector": {
              "object": null
            },
            "name": "Data",
            "description": "Some integrations provide extended functionality. For information on how to use _data_, refer to the integration documentation.."
          }
        }
      },
      "notify": {
        "name": "Send a notification with notify",
        "description": "Sends a notification message using the notify service.",
        "fields": {
          "message": {
            "required": true,
            "example": "The garage door has been open for 10 minutes.",
            "selector": {
              "text": null
            }
          },
          "title": {
            "example": "Your Garage Door Friend",
            "selector": {
              "text": null
            }
          },
          "target": {
            "example": "platform specific",
            "selector": {
              "object": null
            }
          },
          "data": {
            "example": "platform specific",
            "selector": {
              "object": null
            }
          }
        }
      }
    }
  },
  {
    "domain": "backup",
    "services": {
      "create": {
        "name": "Create backup",
        "description": "Creates a new backup.",
        "fields": {}
      }
    }
  },
  {
    "domain": "weather",
    "services": {
      "get_forecast": {
        "name": "Get forecast",
        "description": "Get weather forecast.",
        "fields": {
          "type": {
            "required": true,
            "selector": {
              "select": {
                "options": [
                  "daily",
                  "hourly",
                  "twice_daily"
                ],
                "translation_key": "forecast_type"
              }
            },
            "name": "Forecast type",
            "description": "Forecast type: daily, hourly or twice daily."
          }
        },
        "target": {
          "entity": [
            {
              "domain": [
                "weather"
              ],
              "supported_features": [
                1,
                2,
                4
              ]
            }
          ]
        },
        "response": {
          "optional": false
        }
      }
    }
  },
  {
    "domain": "ffmpeg",
    "services": {
      "start": {
        "name": "Start",
        "description": "Sends a start command to a ffmpeg based sensor.",
        "fields": {
          "entity_id": {
            "selector": {
              "entity": {
                "integration": "ffmpeg",
                "domain": "binary_sensor"
              }
            },
            "name": "Entity",
            "description": "Name of entity that will start. Platform dependent."
          }
        }
      },
      "stop": {
        "name": "Stop",
        "description": "Sends a stop command to a ffmpeg based sensor.",
        "fields": {
          "entity_id": {
            "selector": {
              "entity": {
                "integration": "ffmpeg",
                "domain": "binary_sensor"
              }
            },
            "name": "Entity",
            "description": "Name of entity that will stop. Platform dependent."
          }
        }
      },
      "restart": {
        "name": "Restart",
        "description": "Sends a restart command to a ffmpeg based sensor.",
        "fields": {
          "entity_id": {
            "selector": {
              "entity": {
                "integration": "ffmpeg",
                "domain": "binary_sensor"
              }
            },
            "name": "Entity",
            "description": "Name of entity that will restart. Platform dependent."
          }
        }
      }
    }
  },
  {
    "domain": "camera",
    "services": {
      "enable_motion_detection": {
        "name": "Enable motion detection",
        "description": "Enables the motion detection.",
        "fields": {},
        "target": {
          "entity": [
            {
              "domain": [
                "camera"
              ]
            }
          ]
        }
      },
      "disable_motion_detection": {
        "name": "Disable motion detection",
        "description": "Disables the motion detection.",
        "fields": {},
        "target": {
          "entity": [
            {
              "domain": [
                "camera"
              ]
            }
          ]
        }
      },
      "turn_off": {
        "name": "Turn off",
        "description": "Turns off the camera.",
        "fields": {},
        "target": {
          "entity": [
            {
              "domain": [
                "camera"
              ]
            }
          ]
        }
      },
      "turn_on": {
        "name": "Turn on",
        "description": "Turns on the camera.",
        "fields": {},
        "target": {
          "entity": [
            {
              "domain": [
                "camera"
              ]
            }
          ]
        }
      },
      "snapshot": {
        "name": "Take snapshot",
        "description": "Takes a snapshot from a camera.",
        "fields": {
          "filename": {
            "required": true,
            "example": "/tmp/snapshot_{{ entity_id.name }}.jpg",
            "selector": {
              "text": null
            },
            "name": "Filename",
            "description": "Template of a filename. Variable available is `entity_id`."
          }
        },
        "target": {
          "entity": [
            {
              "domain": [
                "camera"
              ]
            }
          ]
        }
      },
      "play_stream": {
        "name": "Play stream",
        "description": "Plays the camera stream on a supported media player.",
        "fields": {
          "media_player": {
            "required": true,
            "selector": {
              "entity": {
                "domain": "media_player"
              }
            },
            "name": "Media player",
            "description": "Media players to stream to."
          },
          "format": {
            "default": "hls",
            "selector": {
              "select": {
                "options": [
                  "hls"
                ]
              }
            },
            "name": "Format",
            "description": "Stream format supported by the media player."
          }
        },
        "target": {
          "entity": [
            {
              "domain": [
                "camera"
              ]
            }
          ]
        }
      },
      "record": {
        "name": "Record",
        "description": "Creates a recording of a live camera feed.",
        "fields": {
          "filename": {
            "required": true,
            "example": "/tmp/snapshot_{{ entity_id.name }}.mp4",
            "selector": {
              "text": null
            },
            "name": "Filename",
            "description": "Template of a filename. Variable available is `entity_id`. Must be mp4."
          },
          "duration": {
            "default": 30,
            "selector": {
              "number": {
                "min": 1,
                "max": 3600,
                "unit_of_measurement": "seconds"
              }
            },
            "name": "Duration",
            "description": "Planned duration of the recording. The actual duration may vary."
          },
          "lookback": {
            "default": 0,
            "selector": {
              "number": {
                "min": 0,
                "max": 300,
                "unit_of_measurement": "seconds"
              }
            },
            "name": "Lookback",
            "description": "Planned lookback period to include in the recording (in addition to the duration). Only available if there is currently an active HLS stream. The actual length of the lookback period may vary."
          }
        },
        "target": {
          "entity": [
            {
              "domain": [
                "camera"
              ]
            }
          ]
        }
      }
    }
  },
  {
    "domain": "alarm_control_panel",
    "services": {
      "alarm_disarm": {
        "name": "Disarm",
        "description": "Disarms the alarm.",
        "fields": {
          "code": {
            "example": "1234",
            "selector": {
              "text": null
            },
            "name": "Code",
            "description": "Code to disarm the alarm."
          }
        },
        "target": {
          "entity": [
            {
              "domain": [
                "alarm_control_panel"
              ]
            }
          ]
        }
      },
      "alarm_arm_home": {
        "name": "Arm home",
        "description": "Sets the alarm to: _armed, but someone is home_.",
        "fields": {
          "code": {
            "example": "1234",
            "selector": {
              "text": null
            },
            "name": "Code",
            "description": "Code to arm the alarm."
          }
        },
        "target": {
          "entity": [
            {
              "domain": [
                "alarm_control_panel"
              ],
              "supported_features": [
                1
              ]
            }
          ]
        }
      },
      "alarm_arm_away": {
        "name": "Arm away",
        "description": "Sets the alarm to: _armed, no one home_.",
        "fields": {
          "code": {
            "example": "1234",
            "selector": {
              "text": null
            },
            "name": "Code",
            "description": "Code to arm the alarm."
          }
        },
        "target": {
          "entity": [
            {
              "domain": [
                "alarm_control_panel"
              ],
              "supported_features": [
                2
              ]
            }
          ]
        }
      },
      "alarm_arm_night": {
        "name": "Arm night",
        "description": "Sets the alarm to: _armed for the night_.",
        "fields": {
          "code": {
            "example": "1234",
            "selector": {
              "text": null
            },
            "name": "Code",
            "description": "Code to arm the alarm."
          }
        },
        "target": {
          "entity": [
            {
              "domain": [
                "alarm_control_panel"
              ],
              "supported_features": [
                4
              ]
            }
          ]
        }
      },
      "alarm_arm_vacation": {
        "name": "Arm vacation",
        "description": "Sets the alarm to: _armed for vacation_.",
        "fields": {
          "code": {
            "example": "1234",
            "selector": {
              "text": null
            },
            "name": "Code",
            "description": "Code to arm the alarm."
          }
        },
        "target": {
          "entity": [
            {
              "domain": [
                "alarm_control_panel"
              ],
              "supported_features": [
                32
              ]
            }
          ]
        }
      },
      "alarm_arm_custom_bypass": {
        "name": "Arm with custom bypass",
        "description": "Arms the alarm while allowing to bypass a custom area.",
        "fields": {
          "code": {
            "example": "1234",
            "selector": {
              "text": null
            },
            "name": "Code",
            "description": "Code to arm the alarm."
          }
        },
        "target": {
          "entity": [
            {
              "domain": [
                "alarm_control_panel"
              ],
              "supported_features": [
                16
              ]
            }
          ]
        }
      },
      "alarm_trigger": {
        "name": "Trigger",
        "description": "Enables an external alarm trigger.",
        "fields": {
          "code": {
            "example": "1234",
            "selector": {
              "text": null
            },
            "name": "Code",
            "description": "Code to arm the alarm."
          }
        },
        "target": {
          "entity": [
            {
              "domain": [
                "alarm_control_panel"
              ],
              "supported_features": [
                8
              ]
            }
          ]
        }
      }
    }
  },
  {
    "domain": "button",
    "services": {
      "press": {
        "name": "Press",
        "description": "Press the button entity.",
        "fields": {},
        "target": {
          "entity": [
            {
              "domain": [
                "button"
              ]
            }
          ]
        }
      }
    }
  },
  {
    "domain": "climate",
    "services": {
      "turn_on": {
        "name": "Turn on",
        "description": "Turns climate device on.",
        "fields": {},
        "target": {
          "entity": [
            {
              "domain": [
                "climate"
              ]
            }
          ]
        }
      },
      "turn_off": {
        "name": "Turn off",
        "description": "Turns climate device off.",
        "fields": {},
        "target": {
          "entity": [
            {
              "domain": [
                "climate"
              ]
            }
          ]
        }
      },
      "set_hvac_mode": {
        "name": "Set HVAC mode",
        "description": "Sets HVAC operation mode.",
        "fields": {
          "hvac_mode": {
            "selector": {
              "select": {
                "options": [
                  "off",
                  "auto",
                  "cool",
                  "dry",
                  "fan_only",
                  "heat_cool",
                  "heat"
                ],
                "translation_key": "hvac_mode"
              }
            },
            "name": "HVAC mode",
            "description": "HVAC operation mode."
          }
        },
        "target": {
          "entity": [
            {
              "domain": [
                "climate"
              ]
            }
          ]
        }
      },
      "set_preset_mode": {
        "name": "Set preset mode",
        "description": "Sets preset mode.",
        "fields": {
          "preset_mode": {
            "required": true,
            "example": "away",
            "selector": {
              "text": null
            },
            "name": "Preset mode",
            "description": "Preset mode."
          }
        },
        "target": {
          "entity": [
            {
              "domain": [
                "climate"
              ],
              "supported_features": [
                16
              ]
            }
          ]
        }
      },
      "set_aux_heat": {
        "name": "Turn on/off auxiliary heater",
        "description": "Turns auxiliary heater on/off.",
        "fields": {
          "aux_heat": {
            "required": true,
            "selector": {
              "boolean": null
            },
            "name": "Auxiliary heating",
            "description": "New value of auxiliary heater."
          }
        },
        "target": {
          "entity": [
            {
              "domain": [
                "climate"
              ],
              "supported_features": [
                64
              ]
            }
          ]
        }
      },
      "set_temperature": {
        "name": "Set target temperature",
        "description": "Sets target temperature.",
        "fields": {
          "temperature": {
            "filter": {
              "supported_features": [
                1
              ]
            },
            "selector": {
              "number": {
                "min": 0,
                "max": 250,
                "step": 0.1,
                "mode": "box"
              }
            },
            "name": "Temperature",
            "description": "Target temperature."
          },
          "target_temp_high": {
            "filter": {
              "supported_features": [
                2
              ]
            },
            "advanced": true,
            "selector": {
              "number": {
                "min": 0,
                "max": 250,
                "step": 0.1,
                "mode": "box"
              }
            },
            "name": "Target temperature high",
            "description": "High target temperature."
          },
          "target_temp_low": {
            "filter": {
              "supported_features": [
                2
              ]
            },
            "advanced": true,
            "selector": {
              "number": {
                "min": 0,
                "max": 250,
                "step": 0.1,
                "mode": "box"
              }
            },
            "name": "Target temperature low",
            "description": "Low target temperature."
          },
          "hvac_mode": {
            "selector": {
              "select": {
                "options": [
                  "off",
                  "auto",
                  "cool",
                  "dry",
                  "fan_only",
                  "heat_cool",
                  "heat"
                ],
                "translation_key": "hvac_mode"
              }
            },
            "name": "HVAC mode",
            "description": "HVAC operation mode."
          }
        },
        "target": {
          "entity": [
            {
              "domain": [
                "climate"
              ],
              "supported_features": [
                1,
                2
              ]
            }
          ]
        }
      },
      "set_humidity": {
        "name": "Set target humidity",
        "description": "Sets target humidity.",
        "fields": {
          "humidity": {
            "required": true,
            "selector": {
              "number": {
                "min": 30,
                "max": 99,
                "unit_of_measurement": "%"
              }
            },
            "name": "Humidity",
            "description": "Target humidity."
          }
        },
        "target": {
          "entity": [
            {
              "domain": [
                "climate"
              ],
              "supported_features": [
                4
              ]
            }
          ]
        }
      },
      "set_fan_mode": {
        "name": "Set fan mode",
        "description": "Sets fan operation mode.",
        "fields": {
          "fan_mode": {
            "required": true,
            "example": "low",
            "selector": {
              "text": null
            },
            "name": "Fan mode",
            "description": "Fan operation mode."
          }
        },
        "target": {
          "entity": [
            {
              "domain": [
                "climate"
              ],
              "supported_features": [
                8
              ]
            }
          ]
        }
      },
      "set_swing_mode": {
        "name": "Set swing mode",
        "description": "Sets swing operation mode.",
        "fields": {
          "swing_mode": {
            "required": true,
            "example": "horizontal",
            "selector": {
              "text": null
            },
            "name": "Swing mode",
            "description": "Swing operation mode."
          }
        },
        "target": {
          "entity": [
            {
              "domain": [
                "climate"
              ],
              "supported_features": [
                32
              ]
            }
          ]
        }
      }
    }
  },
  {
    "domain": "fan",
    "services": {
      "turn_on": {
        "name": "Turn on",
        "description": "Turns fan on.",
        "fields": {
          "percentage": {
            "filter": {
              "supported_features": [
                1
              ]
            },
            "selector": {
              "number": {
                "min": 0,
                "max": 100,
                "unit_of_measurement": "%"
              }
            },
            "name": "Percentage",
            "description": "Speed of the fan."
          },
          "preset_mode": {
            "example": "auto",
            "filter": {
              "supported_features": [
                8
              ]
            },
            "selector": {
              "text": null
            },
            "name": "Preset mode",
            "description": "Preset mode."
          }
        },
        "target": {
          "entity": [
            {
              "domain": [
                "fan"
              ]
            }
          ]
        }
      },
      "turn_off": {
        "name": "Turn off",
        "description": "Turns fan off.",
        "fields": {},
        "target": {
          "entity": [
            {
              "domain": [
                "fan"
              ]
            }
          ]
        }
      },
      "toggle": {
        "name": "Toggle",
        "description": "Toggles the fan on/off.",
        "fields": {},
        "target": {
          "entity": [
            {
              "domain": [
                "fan"
              ]
            }
          ]
        }
      },
      "increase_speed": {
        "name": "Increase speed",
        "description": "Increases the speed of the fan.",
        "fields": {
          "percentage_step": {
            "advanced": true,
            "required": false,
            "selector": {
              "number": {
                "min": 0,
                "max": 100,
                "unit_of_measurement": "%"
              }
            },
            "name": "Increment",
            "description": "Increases the speed by a percentage step."
          }
        },
        "target": {
          "entity": [
            {
              "domain": [
                "fan"
              ],
              "supported_features": [
                1
              ]
            }
          ]
        }
      },
      "decrease_speed": {
        "name": "Decrease speed",
        "description": "Decreases the speed of the fan.",
        "fields": {
          "percentage_step": {
            "advanced": true,
            "required": false,
            "selector": {
              "number": {
                "min": 0,
                "max": 100,
                "unit_of_measurement": "%"
              }
            },
            "name": "Decrement",
            "description": "Decreases the speed by a percentage step."
          }
        },
        "target": {
          "entity": [
            {
              "domain": [
                "fan"
              ],
              "supported_features": [
                1
              ]
            }
          ]
        }
      },
      "oscillate": {
        "name": "Oscillate",
        "description": "Controls oscillatation of the fan.",
        "fields": {
          "oscillating": {
            "required": true,
            "selector": {
              "boolean": null
            },
            "name": "Oscillating",
            "description": "Turn on/off oscillation."
          }
        },
        "target": {
          "entity": [
            {
              "domain": [
                "fan"
              ],
              "supported_features": [
                2
              ]
            }
          ]
        }
      },
      "set_direction": {
        "name": "Set direction",
        "description": "Sets the fan rotation direction.",
        "fields": {
          "direction": {
            "required": true,
            "selector": {
              "select": {
                "options": [
                  "forward",
                  "reverse"
                ],
                "translation_key": "direction"
              }
            },
            "name": "Direction",
            "description": "Direction to rotate."
          }
        },
        "target": {
          "entity": [
            {
              "domain": [
                "fan"
              ],
              "supported_features": [
                4
              ]
            }
          ]
        }
      },
      "set_percentage": {
        "name": "Set speed",
        "description": "Sets the fan speed.",
        "fields": {
          "percentage": {
            "required": true,
            "selector": {
              "number": {
                "min": 0,
                "max": 100,
                "unit_of_measurement": "%"
              }
            },
            "name": "Percentage",
            "description": "Speed of the fan."
          }
        },
        "target": {
          "entity": [
            {
              "domain": [
                "fan"
              ],
              "supported_features": [
                1
              ]
            }
          ]
        }
      },
      "set_preset_mode": {
        "name": "Set preset mode",
        "description": "Sets preset mode.",
        "fields": {
          "preset_mode": {
            "required": true,
            "example": "auto",
            "selector": {
              "text": null
            },
            "name": "Preset mode",
            "description": "Preset mode."
          }
        },
        "target": {
          "entity": [
            {
              "domain": [
                "fan"
              ],
              "supported_features": [
                8
              ]
            }
          ]
        }
      }
    }
  },
  {
    "domain": "number",
    "services": {
      "set_value": {
        "name": "Set",
        "description": "Sets the value of a number.",
        "fields": {
          "value": {
            "example": 42,
            "selector": {
              "text": null
            },
            "name": "Value",
            "description": "The target value to set."
          }
        },
        "target": {
          "entity": [
            {
              "domain": [
                "number"
              ]
            }
          ]
        }
      }
    }
  },
  {
    "domain": "select",
    "services": {
      "select_first": {
        "name": "First",
        "description": "Selects the first option.",
        "fields": {},
        "target": {
          "entity": [
            {
              "domain": [
                "select"
              ]
            }
          ]
        }
      },
      "select_last": {
        "name": "Last",
        "description": "Selects the last option.",
        "fields": {},
        "target": {
          "entity": [
            {
              "domain": [
                "select"
              ]
            }
          ]
        }
      },
      "select_next": {
        "name": "Next",
        "description": "Selects the next option.",
        "fields": {
          "cycle": {
            "default": true,
            "selector": {
              "boolean": null
            },
            "name": "Cycle",
            "description": "If the option should cycle from the last to the first."
          }
        },
        "target": {
          "entity": [
            {
              "domain": [
                "select"
              ]
            }
          ]
        }
      },
      "select_option": {
        "name": "Select",
        "description": "Selects an option.",
        "fields": {
          "option": {
            "required": true,
            "example": "\"Item A\"",
            "selector": {
              "text": null
            },
            "name": "Option",
            "description": "Option to be selected."
          }
        },
        "target": {
          "entity": [
            {
              "domain": [
                "select"
              ]
            }
          ]
        }
      },
      "select_previous": {
        "name": "Previous",
        "description": "Selects the previous option.",
        "fields": {
          "cycle": {
            "default": true,
            "selector": {
              "boolean": null
            },
            "name": "Cycle",
            "description": "If the option should cycle from the first to the last."
          }
        },
        "target": {
          "entity": [
            {
              "domain": [
                "select"
              ]
            }
          ]
        }
      }
    }
  },
  {
    "domain": "vacuum",
    "services": {
      "turn_on": {
        "name": "Turn on",
        "description": "Starts a new cleaning task.",
        "fields": {},
        "target": {
          "entity": [
            {
              "domain": [
                "vacuum"
              ],
              "supported_features": [
                1
              ]
            }
          ]
        }
      },
      "turn_off": {
        "name": "Turn off",
        "description": "Stops the current cleaning task and returns to its dock.",
        "fields": {},
        "target": {
          "entity": [
            {
              "domain": [
                "vacuum"
              ],
              "supported_features": [
                2
              ]
            }
          ]
        }
      },
      "toggle": {
        "name": "",
        "description": "",
        "fields": {}
      },
      "start_pause": {
        "name": "Start/pause",
        "description": "Starts, pauses, or resumes the cleaning task.",
        "fields": {},
        "target": {
          "entity": [
            {
              "domain": [
                "vacuum"
              ],
              "supported_features": [
                4
              ]
            }
          ]
        }
      },
      "start": {
        "name": "Start",
        "description": "Starts or resumes the cleaning task.",
        "fields": {},
        "target": {
          "entity": [
            {
              "domain": [
                "vacuum"
              ],
              "supported_features": [
                8192
              ]
            }
          ]
        }
      },
      "pause": {
        "name": "Pause",
        "description": "Pauses the cleaning task.",
        "fields": {},
        "target": {
          "entity": [
            {
              "domain": [
                "vacuum"
              ],
              "supported_features": [
                4
              ]
            }
          ]
        }
      },
      "return_to_base": {
        "name": "Return to dock",
        "description": "Tells the vacuum cleaner to return to its dock.",
        "fields": {},
        "target": {
          "entity": [
            {
              "domain": [
                "vacuum"
              ],
              "supported_features": [
                16
              ]
            }
          ]
        }
      },
      "clean_spot": {
        "name": "Clean spot",
        "description": "Tells the vacuum cleaner to do a spot clean-up.",
        "fields": {},
        "target": {
          "entity": [
            {
              "domain": [
                "vacuum"
              ]
            }
          ]
        }
      },
      "locate": {
        "name": "Locate",
        "description": "Locates the vacuum cleaner robot.",
        "fields": {},
        "target": {
          "entity": [
            {
              "domain": [
                "vacuum"
              ],
              "supported_features": [
                512
              ]
            }
          ]
        }
      },
      "stop": {
        "name": "Stop",
        "description": "Stops the current cleaning task.",
        "fields": {},
        "target": {
          "entity": [
            {
              "domain": [
                "vacuum"
              ],
              "supported_features": [
                8
              ]
            }
          ]
        }
      },
      "set_fan_speed": {
        "name": "Set fan speed",
        "description": "Sets the fan speed of the vacuum cleaner.",
        "fields": {
          "fan_speed": {
            "required": true,
            "example": "low",
            "selector": {
              "text": null
            },
            "name": "Fan speed",
            "description": "Fan speed. The value depends on the integration. Some integrations have speed steps, like 'medium'. Some use a percentage, between 0 and 100."
          }
        },
        "target": {
          "entity": [
            {
              "domain": [
                "vacuum"
              ]
            }
          ]
        }
      },
      "send_command": {
        "name": "Send command",
        "description": "Sends a command to the vacuum cleaner.",
        "fields": {
          "command": {
            "required": true,
            "example": "set_dnd_timer",
            "selector": {
              "text": null
            },
            "name": "Command",
            "description": "Command to execute. The commands are integration-specific."
          },
          "params": {
            "example": "{ \"key\": \"value\" }",
            "selector": {
              "object": null
            },
            "name": "Parameters",
            "description": "Parameters for the command. The parameters are integration-specific."
          }
        },
        "target": {
          "entity": [
            {
              "domain": [
                "vacuum"
              ]
            }
          ]
        }
      }
    }
  },
  {
    "domain": "cover",
    "services": {
      "open_cover": {
        "name": "Open",
        "description": "Opens a cover.",
        "fields": {},
        "target": {
          "entity": [
            {
              "domain": [
                "cover"
              ],
              "supported_features": [
                1
              ]
            }
          ]
        }
      },
      "close_cover": {
        "name": "Close",
        "description": "Closes a cover.",
        "fields": {},
        "target": {
          "entity": [
            {
              "domain": [
                "cover"
              ],
              "supported_features": [
                2
              ]
            }
          ]
        }
      },
      "set_cover_position": {
        "name": "Set position",
        "description": "Moves a cover to a specific position.",
        "fields": {
          "position": {
            "required": true,
            "selector": {
              "number": {
                "min": 0,
                "max": 100,
                "unit_of_measurement": "%"
              }
            },
            "name": "Position",
            "description": "Target position."
          }
        },
        "target": {
          "entity": [
            {
              "domain": [
                "cover"
              ],
              "supported_features": [
                4
              ]
            }
          ]
        }
      },
      "stop_cover": {
        "name": "Stop",
        "description": "Stops the cover movement.",
        "fields": {},
        "target": {
          "entity": [
            {
              "domain": [
                "cover"
              ],
              "supported_features": [
                8
              ]
            }
          ]
        }
      },
      "toggle": {
        "name": "Toggle",
        "description": "Toggles a cover open/closed.",
        "fields": {},
        "target": {
          "entity": [
            {
              "domain": [
                "cover"
              ],
              "supported_features": [
                3
              ]
            }
          ]
        }
      },
      "open_cover_tilt": {
        "name": "Open tilt",
        "description": "Tilts a cover open.",
        "fields": {},
        "target": {
          "entity": [
            {
              "domain": [
                "cover"
              ],
              "supported_features": [
                16
              ]
            }
          ]
        }
      },
      "close_cover_tilt": {
        "name": "Close tilt",
        "description": "Tilts a cover to close.",
        "fields": {},
        "target": {
          "entity": [
            {
              "domain": [
                "cover"
              ],
              "supported_features": [
                32
              ]
            }
          ]
        }
      },
      "stop_cover_tilt": {
        "name": "Stop tilt",
        "description": "Stops a tilting cover movement.",
        "fields": {},
        "target": {
          "entity": [
            {
              "domain": [
                "cover"
              ],
              "supported_features": [
                64
              ]
            }
          ]
        }
      },
      "set_cover_tilt_position": {
        "name": "Set tilt position",
        "description": "Moves a cover tilt to a specific position.",
        "fields": {
          "tilt_position": {
            "required": true,
            "selector": {
              "number": {
                "min": 0,
                "max": 100,
                "unit_of_measurement": "%"
              }
            },
            "name": "Tilt position",
            "description": "Target tilt positition."
          }
        },
        "target": {
          "entity": [
            {
              "domain": [
                "cover"
              ],
              "supported_features": [
                128
              ]
            }
          ]
        }
      },
      "toggle_cover_tilt": {
        "name": "Toggle tilt",
        "description": "Toggles a cover tilt open/closed.",
        "fields": {},
        "target": {
          "entity": [
            {
              "domain": [
                "cover"
              ],
              "supported_features": [
                48
              ]
            }
          ]
        }
      }
    }
  },
  {
    "domain": "siren",
    "services": {
      "turn_on": {
        "name": "Turn on",
        "description": "Turns the siren on.",
        "fields": {
          "tone": {
            "example": "fire",
            "filter": {
              "supported_features": [
                4
              ]
            },
            "required": false,
            "selector": {
              "text": null
            },
            "name": "Tone",
            "description": "The tone to emit. When `available_tones` property is a map, either the key or the value can be used. Must be supported by the integration."
          },
          "volume_level": {
            "example": 0.5,
            "filter": {
              "supported_features": [
                8
              ]
            },
            "required": false,
            "selector": {
              "number": {
                "min": 0,
                "max": 1,
                "step": 0.05
              }
            },
            "name": "Volume",
            "description": "The volume. 0 is inaudible, 1 is the maximum volume. Must be supported by the integration."
          },
          "duration": {
            "example": 15,
            "filter": {
              "supported_features": [
                16
              ]
            },
            "required": false,
            "selector": {
              "text": null
            },
            "name": "Duration",
            "description": "Number of seconds the sound is played. Must be supported by the integration."
          }
        },
        "target": {
          "entity": [
            {
              "domain": [
                "siren"
              ],
              "supported_features": [
                1
              ]
            }
          ]
        }
      },
      "turn_off": {
        "name": "Turn off",
        "description": "Turns the siren off.",
        "fields": {},
        "target": {
          "entity": [
            {
              "domain": [
                "siren"
              ],
              "supported_features": [
                2
              ]
            }
          ]
        }
      },
      "toggle": {
        "name": "Toggle",
        "description": "Toggles the siren on/off.",
        "fields": {},
        "target": {
          "entity": [
            {
              "domain": [
                "siren"
              ],
              "supported_features": [
                3
              ]
            }
          ]
        }
      }
    }
  },
  {
    "domain": "humidifier",
    "services": {
      "turn_on": {
        "name": "Turn on",
        "description": "Turns the humidifier on.",
        "fields": {},
        "target": {
          "entity": [
            {
              "domain": [
                "humidifier"
              ]
            }
          ]
        }
      },
      "turn_off": {
        "name": "Turn off",
        "description": "Turns the humidifier off.",
        "fields": {},
        "target": {
          "entity": [
            {
              "domain": [
                "humidifier"
              ]
            }
          ]
        }
      },
      "toggle": {
        "name": "Toggle",
        "description": "Toggles the humidifier on/off.",
        "fields": {},
        "target": {
          "entity": [
            {
              "domain": [
                "humidifier"
              ]
            }
          ]
        }
      },
      "set_mode": {
        "name": "Set mode",
        "description": "Sets the humidifier operation mode.",
        "fields": {
          "mode": {
            "required": true,
            "example": "away",
            "selector": {
              "text": null
            },
            "name": "Mode",
            "description": "Operation mode. For example, _normal_, _eco_, or _away_. For a list of possible values, refer to the integration documentation."
          }
        },
        "target": {
          "entity": [
            {
              "domain": [
                "humidifier"
              ],
              "supported_features": [
                1
              ]
            }
          ]
        }
      },
      "set_humidity": {
        "name": "Set humidity",
        "description": "Sets the target humidity.",
        "fields": {
          "humidity": {
            "required": true,
            "selector": {
              "number": {
                "min": 0,
                "max": 100,
                "unit_of_measurement": "%"
              }
            },
            "name": "Humidity",
            "description": "Target humidity."
          }
        },
        "target": {
          "entity": [
            {
              "domain": [
                "humidifier"
              ]
            }
          ]
        }
      }
    }
  },
  {
    "domain": "light",
    "services": {
      "turn_on": {
        "name": "Turn on",
        "description": "Turn on one or more lights and adjust properties of the light, even when they are turned on already.",
        "fields": {
          "transition": {
            "filter": {
              "supported_features": [
                32
              ]
            },
            "selector": {
              "number": {
                "min": 0,
                "max": 300,
                "unit_of_measurement": "seconds"
              }
            },
            "name": "Transition",
            "description": "Duration it takes to get to next state."
          },
          "rgb_color": {
            "filter": {
              "attribute": {
                "supported_color_modes": [
                  "hs",
                  "xy",
                  "rgb",
                  "rgbw",
                  "rgbww"
                ]
              }
            },
            "selector": {
              "color_rgb": null
            },
            "name": "Color",
            "description": "The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue."
          },
          "rgbw_color": {
            "filter": {
              "attribute": {
                "supported_color_modes": [
                  "hs",
                  "xy",
                  "rgb",
                  "rgbw",
                  "rgbww"
                ]
              }
            },
            "advanced": true,
            "example": "[255, 100, 100, 50]",
            "selector": {
              "object": null
            },
            "name": "RGBW-color",
            "description": "The color in RGBW format. A list of four integers between 0 and 255 representing the values of red, green, blue, and white."
          },
          "rgbww_color": {
            "filter": {
              "attribute": {
                "supported_color_modes": [
                  "hs",
                  "xy",
                  "rgb",
                  "rgbw",
                  "rgbww"
                ]
              }
            },
            "advanced": true,
            "example": "[255, 100, 100, 50, 70]",
            "selector": {
              "object": null
            },
            "name": "RGBWW-color",
            "description": "The color in RGBWW format. A list of five integers between 0 and 255 representing the values of red, green, blue, cold white, and warm white."
          },
          "color_name": {
            "filter": {
              "attribute": {
                "supported_color_modes": [
                  "hs",
                  "xy",
                  "rgb",
                  "rgbw",
                  "rgbww"
                ]
              }
            },
            "advanced": true,
            "selector": {
              "select": {
                "translation_key": "color_name",
                "options": [
                  "homeassistant",
                  "aliceblue",
                  "antiquewhite",
                  "aqua",
                  "aquamarine",
                  "azure",
                  "beige",
                  "bisque",
                  "blanchedalmond",
                  "blue",
                  "blueviolet",
                  "brown",
                  "burlywood",
                  "cadetblue",
                  "chartreuse",
                  "chocolate",
                  "coral",
                  "cornflowerblue",
                  "cornsilk",
                  "crimson",
                  "cyan",
                  "darkblue",
                  "darkcyan",
                  "darkgoldenrod",
                  "darkgray",
                  "darkgreen",
                  "darkgrey",
                  "darkkhaki",
                  "darkmagenta",
                  "darkolivegreen",
                  "darkorange",
                  "darkorchid",
                  "darkred",
                  "darksalmon",
                  "darkseagreen",
                  "darkslateblue",
                  "darkslategray",
                  "darkslategrey",
                  "darkturquoise",
                  "darkviolet",
                  "deeppink",
                  "deepskyblue",
                  "dimgray",
                  "dimgrey",
                  "dodgerblue",
                  "firebrick",
                  "floralwhite",
                  "forestgreen",
                  "fuchsia",
                  "gainsboro",
                  "ghostwhite",
                  "gold",
                  "goldenrod",
                  "gray",
                  "green",
                  "greenyellow",
                  "grey",
                  "honeydew",
                  "hotpink",
                  "indianred",
                  "indigo",
                  "ivory",
                  "khaki",
                  "lavender",
                  "lavenderblush",
                  "lawngreen",
                  "lemonchiffon",
                  "lightblue",
                  "lightcoral",
                  "lightcyan",
                  "lightgoldenrodyellow",
                  "lightgray",
                  "lightgreen",
                  "lightgrey",
                  "lightpink",
                  "lightsalmon",
                  "lightseagreen",
                  "lightskyblue",
                  "lightslategray",
                  "lightslategrey",
                  "lightsteelblue",
                  "lightyellow",
                  "lime",
                  "limegreen",
                  "linen",
                  "magenta",
                  "maroon",
                  "mediumaquamarine",
                  "mediumblue",
                  "mediumorchid",
                  "mediumpurple",
                  "mediumseagreen",
                  "mediumslateblue",
                  "mediumspringgreen",
                  "mediumturquoise",
                  "mediumvioletred",
                  "midnightblue",
                  "mintcream",
                  "mistyrose",
                  "moccasin",
                  "navajowhite",
                  "navy",
                  "navyblue",
                  "oldlace",
                  "olive",
                  "olivedrab",
                  "orange",
                  "orangered",
                  "orchid",
                  "palegoldenrod",
                  "palegreen",
                  "paleturquoise",
                  "palevioletred",
                  "papayawhip",
                  "peachpuff",
                  "peru",
                  "pink",
                  "plum",
                  "powderblue",
                  "purple",
                  "red",
                  "rosybrown",
                  "royalblue",
                  "saddlebrown",
                  "salmon",
                  "sandybrown",
                  "seagreen",
                  "seashell",
                  "sienna",
                  "silver",
                  "skyblue",
                  "slateblue",
                  "slategray",
                  "slategrey",
                  "snow",
                  "springgreen",
                  "steelblue",
                  "tan",
                  "teal",
                  "thistle",
                  "tomato",
                  "turquoise",
                  "violet",
                  "wheat",
                  "white",
                  "whitesmoke",
                  "yellow",
                  "yellowgreen"
                ]
              }
            },
            "name": "Color name",
            "description": "A human-readable color name."
          },
          "hs_color": {
            "filter": {
              "attribute": {
                "supported_color_modes": [
                  "hs",
                  "xy",
                  "rgb",
                  "rgbw",
                  "rgbww"
                ]
              }
            },
            "advanced": true,
            "example": "[300, 70]",
            "selector": {
              "object": null
            },
            "name": "Hue/Sat color",
            "description": "Color in hue/sat format. A list of two integers. Hue is 0-360 and Sat is 0-100."
          },
          "xy_color": {
            "filter": {
              "attribute": {
                "supported_color_modes": [
                  "hs",
                  "xy",
                  "rgb",
                  "rgbw",
                  "rgbww"
                ]
              }
            },
            "advanced": true,
            "example": "[0.52, 0.43]",
            "selector": {
              "object": null
            },
            "name": "XY-color",
            "description": "Color in XY-format. A list of two decimal numbers between 0 and 1."
          },
          "color_temp": {
            "filter": {
              "attribute": {
                "supported_color_modes": [
                  "color_temp",
                  "hs",
                  "xy",
                  "rgb",
                  "rgbw",
                  "rgbww"
                ]
              }
            },
            "selector": {
              "color_temp": {
                "min_mireds": 153,
                "max_mireds": 500
              }
            },
            "name": "Color temperature",
            "description": "Color temperature in mireds."
          },
          "kelvin": {
            "filter": {
              "attribute": {
                "supported_color_modes": [
                  "color_temp",
                  "hs",
                  "xy",
                  "rgb",
                  "rgbw",
                  "rgbww"
                ]
              }
            },
            "advanced": true,
            "selector": {
              "number": {
                "min": 2000,
                "max": 6500,
                "step": 100,
                "unit_of_measurement": "K"
              }
            },
            "name": "Color temperature",
            "description": "Color temperature in Kelvin."
          },
          "brightness": {
            "filter": {
              "attribute": {
                "supported_color_modes": [
                  "brightness",
                  "color_temp",
                  "hs",
                  "xy",
                  "rgb",
                  "rgbw",
                  "rgbww"
                ]
              }
            },
            "advanced": true,
            "selector": {
              "number": {
                "min": 0,
                "max": 255
              }
            },
            "name": "Brightness value",
            "description": "Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness, and 255 is the maximum brightness."
          },
          "brightness_pct": {
            "filter": {
              "attribute": {
                "supported_color_modes": [
                  "brightness",
                  "color_temp",
                  "hs",
                  "xy",
                  "rgb",
                  "rgbw",
                  "rgbww"
                ]
              }
            },
            "selector": {
              "number": {
                "min": 0,
                "max": 100,
                "unit_of_measurement": "%"
              }
            },
            "name": "Brightness",
            "description": "Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness."
          },
          "brightness_step": {
            "filter": {
              "attribute": {
                "supported_color_modes": [
                  "brightness",
                  "color_temp",
                  "hs",
                  "xy",
                  "rgb",
                  "rgbw",
                  "rgbww"
                ]
              }
            },
            "advanced": true,
            "selector": {
              "number": {
                "min": -225,
                "max": 255
              }
            },
            "name": "Brightness step value",
            "description": "Change brightness by an amount."
          },
          "brightness_step_pct": {
            "filter": {
              "attribute": {
                "supported_color_modes": [
                  "brightness",
                  "color_temp",
                  "hs",
                  "xy",
                  "rgb",
                  "rgbw",
                  "rgbww"
                ]
              }
            },
            "selector": {
              "number": {
                "min": -100,
                "max": 100,
                "unit_of_measurement": "%"
              }
            },
            "name": "Brightness step",
            "description": "Change brightness by a percentage."
          },
          "white": {
            "filter": {
              "attribute": {
                "supported_color_modes": [
                  "white"
                ]
              }
            },
            "advanced": true,
            "selector": {
              "constant": {
                "value": true,
                "label": "Enabled"
              }
            },
            "name": "White",
            "description": "Set the light to white mode."
          },
          "profile": {
            "advanced": true,
            "example": "relax",
            "selector": {
              "text": null
            },
            "name": "Profile",
            "description": "Name of a light profile to use."
          },
          "flash": {
            "filter": {
              "supported_features": [
                8
              ]
            },
            "advanced": true,
            "selector": {
              "select": {
                "options": [
                  {
                    "label": "Long",
                    "value": "long"
                  },
                  {
                    "label": "Short",
                    "value": "short"
                  }
                ]
              }
            },
            "name": "Flash",
            "description": "Tell light to flash, can be either value short or long."
          },
          "effect": {
            "filter": {
              "supported_features": [
                4
              ]
            },
            "selector": {
              "text": null
            },
            "name": "Effect",
            "description": "Light effect."
          }
        },
        "target": {
          "entity": [
            {
              "domain": [
                "light"
              ]
            }
          ]
        }
      },
      "turn_off": {
        "name": "Turn off",
        "description": "Turn off one or more lights.",
        "fields": {
          "transition": {
            "filter": {
              "supported_features": [
                32
              ]
            },
            "selector": {
              "number": {
                "min": 0,
                "max": 300,
                "unit_of_measurement": "seconds"
              }
            },
            "name": "Transition",
            "description": "Duration it takes to get to next state."
          },
          "flash": {
            "filter": {
              "supported_features": [
                8
              ]
            },
            "advanced": true,
            "selector": {
              "select": {
                "options": [
                  {
                    "label": "Long",
                    "value": "long"
                  },
                  {
                    "label": "Short",
                    "value": "short"
                  }
                ]
              }
            },
            "name": "Flash",
            "description": "Tell light to flash, can be either value short or long."
          }
        },
        "target": {
          "entity": [
            {
              "domain": [
                "light"
              ]
            }
          ]
        }
      },
      "toggle": {
        "name": "Toggle",
        "description": "Toggles one or more lights, from on to off, or, off to on, based on their current state.",
        "fields": {
          "transition": {
            "filter": {
              "supported_features": [
                32
              ]
            },
            "selector": {
              "number": {
                "min": 0,
                "max": 300,
                "unit_of_measurement": "seconds"
              }
            },
            "name": "Transition",
            "description": "Duration it takes to get to next state."
          },
          "rgb_color": {
            "filter": {
              "attribute": {
                "supported_color_modes": [
                  "hs",
                  "xy",
                  "rgb",
                  "rgbw",
                  "rgbww"
                ]
              }
            },
            "advanced": true,
            "example": "[255, 100, 100]",
            "selector": {
              "object": null
            },
            "name": "Color",
            "description": "The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue."
          },
          "color_name": {
            "filter": {
              "attribute": {
                "supported_color_modes": [
                  "hs",
                  "xy",
                  "rgb",
                  "rgbw",
                  "rgbww"
                ]
              }
            },
            "advanced": true,
            "selector": {
              "select": {
                "translation_key": "color_name",
                "options": [
                  "homeassistant",
                  "aliceblue",
                  "antiquewhite",
                  "aqua",
                  "aquamarine",
                  "azure",
                  "beige",
                  "bisque",
                  "blanchedalmond",
                  "blue",
                  "blueviolet",
                  "brown",
                  "burlywood",
                  "cadetblue",
                  "chartreuse",
                  "chocolate",
                  "coral",
                  "cornflowerblue",
                  "cornsilk",
                  "crimson",
                  "cyan",
                  "darkblue",
                  "darkcyan",
                  "darkgoldenrod",
                  "darkgray",
                  "darkgreen",
                  "darkgrey",
                  "darkkhaki",
                  "darkmagenta",
                  "darkolivegreen",
                  "darkorange",
                  "darkorchid",
                  "darkred",
                  "darksalmon",
                  "darkseagreen",
                  "darkslateblue",
                  "darkslategray",
                  "darkslategrey",
                  "darkturquoise",
                  "darkviolet",
                  "deeppink",
                  "deepskyblue",
                  "dimgray",
                  "dimgrey",
                  "dodgerblue",
                  "firebrick",
                  "floralwhite",
                  "forestgreen",
                  "fuchsia",
                  "gainsboro",
                  "ghostwhite",
                  "gold",
                  "goldenrod",
                  "gray",
                  "green",
                  "greenyellow",
                  "grey",
                  "honeydew",
                  "hotpink",
                  "indianred",
                  "indigo",
                  "ivory",
                  "khaki",
                  "lavender",
                  "lavenderblush",
                  "lawngreen",
                  "lemonchiffon",
                  "lightblue",
                  "lightcoral",
                  "lightcyan",
                  "lightgoldenrodyellow",
                  "lightgray",
                  "lightgreen",
                  "lightgrey",
                  "lightpink",
                  "lightsalmon",
                  "lightseagreen",
                  "lightskyblue",
                  "lightslategray",
                  "lightslategrey",
                  "lightsteelblue",
                  "lightyellow",
                  "lime",
                  "limegreen",
                  "linen",
                  "magenta",
                  "maroon",
                  "mediumaquamarine",
                  "mediumblue",
                  "mediumorchid",
                  "mediumpurple",
                  "mediumseagreen",
                  "mediumslateblue",
                  "mediumspringgreen",
                  "mediumturquoise",
                  "mediumvioletred",
                  "midnightblue",
                  "mintcream",
                  "mistyrose",
                  "moccasin",
                  "navajowhite",
                  "navy",
                  "navyblue",
                  "oldlace",
                  "olive",
                  "olivedrab",
                  "orange",
                  "orangered",
                  "orchid",
                  "palegoldenrod",
                  "palegreen",
                  "paleturquoise",
                  "palevioletred",
                  "papayawhip",
                  "peachpuff",
                  "peru",
                  "pink",
                  "plum",
                  "powderblue",
                  "purple",
                  "red",
                  "rosybrown",
                  "royalblue",
                  "saddlebrown",
                  "salmon",
                  "sandybrown",
                  "seagreen",
                  "seashell",
                  "sienna",
                  "silver",
                  "skyblue",
                  "slateblue",
                  "slategray",
                  "slategrey",
                  "snow",
                  "springgreen",
                  "steelblue",
                  "tan",
                  "teal",
                  "thistle",
                  "tomato",
                  "turquoise",
                  "violet",
                  "wheat",
                  "white",
                  "whitesmoke",
                  "yellow",
                  "yellowgreen"
                ]
              }
            },
            "name": "Color name",
            "description": "A human-readable color name."
          },
          "hs_color": {
            "filter": {
              "attribute": {
                "supported_color_modes": [
                  "hs",
                  "xy",
                  "rgb",
                  "rgbw",
                  "rgbww"
                ]
              }
            },
            "advanced": true,
            "example": "[300, 70]",
            "selector": {
              "object": null
            },
            "name": "Hue/Sat color",
            "description": "Color in hue/sat format. A list of two integers. Hue is 0-360 and Sat is 0-100."
          },
          "xy_color": {
            "filter": {
              "attribute": {
                "supported_color_modes": [
                  "hs",
                  "xy",
                  "rgb",
                  "rgbw",
                  "rgbww"
                ]
              }
            },
            "advanced": true,
            "example": "[0.52, 0.43]",
            "selector": {
              "object": null
            },
            "name": "XY-color",
            "description": "Color in XY-format. A list of two decimal numbers between 0 and 1."
          },
          "color_temp": {
            "filter": {
              "attribute": {
                "supported_color_modes": [
                  "color_temp",
                  "hs",
                  "xy",
                  "rgb",
                  "rgbw",
                  "rgbww"
                ]
              }
            },
            "advanced": true,
            "selector": {
              "color_temp": null
            },
            "name": "Color temperature",
            "description": "Color temperature in mireds."
          },
          "kelvin": {
            "filter": {
              "attribute": {
                "supported_color_modes": [
                  "color_temp",
                  "hs",
                  "xy",
                  "rgb",
                  "rgbw",
                  "rgbww"
                ]
              }
            },
            "advanced": true,
            "selector": {
              "number": {
                "min": 2000,
                "max": 6500,
                "step": 100,
                "unit_of_measurement": "K"
              }
            },
            "name": "Color temperature",
            "description": "Color temperature in Kelvin."
          },
          "brightness": {
            "filter": {
              "attribute": {
                "supported_color_modes": [
                  "brightness",
                  "color_temp",
                  "hs",
                  "xy",
                  "rgb",
                  "rgbw",
                  "rgbww"
                ]
              }
            },
            "advanced": true,
            "selector": {
              "number": {
                "min": 0,
                "max": 255
              }
            },
            "name": "Brightness value",
            "description": "Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness, and 255 is the maximum brightness."
          },
          "brightness_pct": {
            "filter": {
              "attribute": {
                "supported_color_modes": [
                  "brightness",
                  "color_temp",
                  "hs",
                  "xy",
                  "rgb",
                  "rgbw",
                  "rgbww"
                ]
              }
            },
            "selector": {
              "number": {
                "min": 0,
                "max": 100,
                "unit_of_measurement": "%"
              }
            },
            "name": "Brightness",
            "description": "Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness."
          },
          "white": {
            "filter": {
              "attribute": {
                "supported_color_modes": [
                  "white"
                ]
              }
            },
            "advanced": true,
            "selector": {
              "constant": {
                "value": true,
                "label": "Enabled"
              }
            },
            "name": "White",
            "description": "Set the light to white mode."
          },
          "profile": {
            "advanced": true,
            "example": "relax",
            "selector": {
              "text": null
            },
            "name": "Profile",
            "description": "Name of a light profile to use."
          },
          "flash": {
            "filter": {
              "supported_features": [
                8
              ]
            },
            "advanced": true,
            "selector": {
              "select": {
                "options": [
                  {
                    "label": "Long",
                    "value": "long"
                  },
                  {
                    "label": "Short",
                    "value": "short"
                  }
                ]
              }
            },
            "name": "Flash",
            "description": "Tell light to flash, can be either value short or long."
          },
          "effect": {
            "filter": {
              "supported_features": [
                4
              ]
            },
            "selector": {
              "text": null
            },
            "name": "Effect",
            "description": "Light effect."
          }
        },
        "target": {
          "entity": [
            {
              "domain": [
                "light"
              ]
            }
          ]
        }
      }
    }
  },
  {
    "domain": "switch",
    "services": {
      "turn_off": {
        "name": "Turn off",
        "description": "Turns a switch off.",
        "fields": {},
        "target": {
          "entity": [
            {
              "domain": [
                "switch"
              ]
            }
          ]
        }
      },
      "turn_on": {
        "name": "Turn on",
        "description": "Turns a switch on.",
        "fields": {},
        "target": {
          "entity": [
            {
              "domain": [
                "switch"
              ]
            }
          ]
        }
      },
      "toggle": {
        "name": "Toggle",
        "description": "Toggles a switch on/off.",
        "fields": {},
        "target": {
          "entity": [
            {
              "domain": [
                "switch"
              ]
            }
          ]
        }
      }
    }
  }
]